apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // Android
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:preference-v7:28.0.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1' // Pulls both LiveData and ViewModel
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'androidx.room:room-runtime:2.2.0'
    annotationProcessor 'androidx.room:room-compiler:2.2.0'

    // Other utilities
    implementation 'io.branch.sdk.android:search:1.3.8'
    implementation 'io.branch.sdk.android:library:3.2.0'
    implementation 'com.facebook.fresco:fresco:1.12.1'
    implementation 'com.squareup.okhttp3:okhttp:3.12.6'

    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// Whenever assembleRelease is invoked, an AAR is produced. Copy it into the sample
// and sample2 lib directories so they can depend on it if they want.
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.doLast {
            logger.warn("Copying AAR file in sample folders...")
            copy {
                from('build/outputs/aar')
                include(project.name + '-release.aar')
                into('../sample/libs')
            }
            copy {
                from('build/outputs/aar')
                include(project.name + '-release.aar')
                into('../sample2/libs')
            }
        }
    }
}

// This task can be run manually to trigger a AAR refresh.
task publishReleaseAar {
    dependsOn 'assembleRelease'
}
